buildscript {
    ext {
        versionFilePath = System.getenv("VERSION_FILE_PATH")
        grhVersion = versionFilePath ? new File(versionFilePath).readLines()[0] : 'dev'
        argparserVersion = '2.0.3'
        fuelVersion = '1.9.0'
        klaxonVersion = '0.31'
        kotlinVersion = '1.1.3-2'
        kotlintestVersion = '2.0.5'
        springVersion = "4.3.4.RELEASE"
    }

//    repositories {
//        mavenCentral()
//    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
//        classpath "org.springframework:spring-core:$springVersion"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.1.3"
    id "maven-publish"
}

dependencies {
    repositories {
        jcenter()
        mavenCentral()
    }

    compile "com.andreapivetta.kolor:kolor:0.0.2"
    compile "com.beust:klaxon:$klaxonVersion"
    compile "com.xenomachina:kotlin-argparser:$argparserVersion"
    compile "com.github.kittinunf.fuel:fuel:$fuelVersion"
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    compile "org.springframework:spring-context:$springVersion"

    testCompile "io.kotlintest:kotlintest:$kotlintestVersion"
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin/'
    test.java.srcDirs += 'src/test/kotlin/'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.thewoolleyweb.grh.MainKt'
        )
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

test {
    exclude 'test/acceptance/**'
    testLogging {
        exceptionFormat = 'full'
    }
}

defaultTasks "tasks"

group "com.thewoolleyweb.grh"
version grhVersion

publishing {
    publications {
        Grh(MavenPublication) {
            from components.java
            artifactId project.name
        }
    }

    repositories {
        maven {
            name "grh"
            url "s3://git-revisionist-historian"
            credentials(AwsCredentials) {
                accessKey System.getenv("AWS_ACCESS_KEY_ID")
                secretKey System.getenv("AWS_SECRET_ACCESS_KEY")
            }
        }
        maven {
            mavenLocal()
            url "$project.rootDir/../maven"
        }
    }
}

task publishLocal {
    dependsOn(
            "build",
            "publishToMavenLocal"
    )
}

task acceptanceTest {
    dependsOn "cliProcessorAcceptanceTest"
    dependsOn "apiProcessorAcceptanceTest"
}

task apiProcessorAcceptanceTest(type: Test) {
    mustRunAfter build
    dependsOn build
    include 'test/acceptance/grh/api/**'
}

task cliProcessorAcceptanceTest(type: Test) {
    mustRunAfter build
    dependsOn build
    include 'test/acceptance/grh/cli/**'
}
